from aiogram import Router, types
from aiogram.filters import Command
from utils import auth_required, auth_manager
from api import api_client
from config.settings import LEGAL_SYMBOLS, BUILDINGS
from utils.helpers import validate_name
import shlex

router = Router()


@router.message(Command("set_token"))
@auth_required(admin_only=True)
async def cmd_set_token(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        args = message.text.split()[1:]
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω: `/set_token <—Ç–æ–∫–µ–Ω>`", parse_mode="Markdown"
            )
            return

        token = args[0]
        await auth_manager.save_api_token(token)
        await message.answer("‚úÖ API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")


@router.message(Command("add_user"))
@auth_required(admin_only=True)
async def cmd_add_user(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        args = message.text.split()[1:]
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/add_user <user_id>`",
                parse_mode="Markdown",
            )
            return

        user_id = int(args[0])
        await auth_manager.add_user(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!"
        )

    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@router.message(Command("remove_user"))
@auth_required(admin_only=True)
async def cmd_remove_user(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        args = message.text.split()[1:]
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/remove_user <user_id>`",
                parse_mode="Markdown",
            )
            return

        user_id = int(args[0])
        await auth_manager.remove_user(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!"
        )

    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@router.message(Command("add_group"))
@auth_required(admin_only=True)
async def cmd_add_group(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        chat_id = message.chat.id
        if chat_id > 0:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        await auth_manager.add_group(chat_id)
        await message.answer("‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")


@router.message(Command("remove_group"))
@auth_required(admin_only=True)
async def cmd_remove_group(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        chat_id = message.chat.id
        if chat_id > 0:
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        await auth_manager.remove_group(chat_id)
        await message.answer("‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")


@router.message(Command("status"))
@auth_required(admin_only=True)
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        allowed_users = auth_manager.get_allowed_users()
        allowed_groups = auth_manager.get_allowed_groups()
        api_token = auth_manager.get_api_token()

        status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

**API —Ç–æ–∫–µ–Ω:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {len(allowed_users)}
{', '.join(str(uid) for uid in allowed_users[:10]) if allowed_users else '–ù–µ—Ç'}

**–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:** {len(allowed_groups)}
{', '.join(str(gid) for gid in allowed_groups[:10]) if allowed_groups else '–ù–µ—Ç'}

**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {message.from_user.id}
"""

        await message.answer(status_text, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")


@router.message(Command("add_team"))
@auth_required()
async def cmd_add_team(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    try:
        args = shlex.split(message.text)[1:]
        if len(args) < 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_team <–∑–¥–∞–Ω–∏–µ> <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–¥–∞–Ω–∏—è: {', '.join(map(str, BUILDINGS))}",
                parse_mode="Markdown",
            )
            return

        building = int(args[0])
        name = args[1].strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–∞–Ω–∏—è
        if building not in BUILDINGS:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–¥–∞–Ω–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(map(str, BUILDINGS))}"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if not validate_name(name, LEGAL_SYMBOLS):
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. "
                "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∏—Ä–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        teams = await api_client.get_teams()
        for team in teams:
            if team["name"] == name:
                await message.answer(
                    "‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        token = auth_manager.get_api_token()
        if not token:
            await message.answer(
                "‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        success = await api_client.add_team(token, building, name)
        if success:
            await message.answer(
                f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{name}' (–∑–¥–∞–Ω–∏–µ {building}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω."
            )

    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")


@router.message(Command("remove_team"))
@auth_required()
async def cmd_remove_team(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        args = shlex.split(message.text)[1:]
        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove_team <–Ω–∞–∑–≤–∞–Ω–∏–µ>`",
                parse_mode="Markdown",
            )
            return

        name = args[0].strip()

        # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
        teams = await api_client.get_teams()
        team = api_client.find_team_by_name(teams, name)

        if not team:
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        token = auth_manager.get_api_token()
        if not token:
            await message.answer(
                "‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        success = await api_client.remove_team(token, team["id"])
        if success:
            await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω."
            )

    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
