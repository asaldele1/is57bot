from aiogram import Router, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from api import api_client
from utils import (
    auth_required,
    format_team_info,
    format_task_info,
    split_long_message,
)
from config.settings import SUBJECTS, BUILDINGS

router = Router()


@router.message(Command("start"))
@auth_required()
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IS57 Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API is57.ru –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏, \
–∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
/teams - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/tasks - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
/results - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
    await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("help"))
@auth_required()
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
*–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:*
 ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: "10–í –ì–µ–Ω–∏–∏".
 ‚Ä¢ –ü—Ä–∏ –≤–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, \
–Ω–∞–ø—Ä–∏–º–µ—Ä "10–í" –±—É–¥–µ—Ç –æ—Ç—Å—ã–ª–∞—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ "10–í –ì–µ–Ω–∏–∏".
 ‚Ä¢ –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏, \
–Ω–∞–ø—Ä–∏–º–µ—Ä: `/add\\_team 1 "–ö–æ–º–∞–Ω–¥–∞ –ê"` –∏–ª–∏ \
`/add\\_task –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ "–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞"`.


üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:*
/teams - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/tasks - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
/results - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

*üë• –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏:*
/add\\_team <–∑–¥–∞–Ω–∏–µ - 1 –∏–ª–∏ 3> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
/remove\\_team <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É

*üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏:*
/add\\_task <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
/remove\\_task <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ

*üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:*
/set\\_result <–∫–æ–º–∞–Ω–¥–∞> <–ø—Ä–µ–¥–º–µ—Ç> <–∑–∞–¥–∞–Ω–∏–µ> <–±–∞–ª–ª—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

*üìö –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/subjects - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
/buildings - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

*–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/add\\_team 1 "10–í –ì–µ–Ω–∏–∏"`
`/add\\_task –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ "–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞"`
`/set\\_result 10–í –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ "–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞" 85`
"""

    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("teams"))
@auth_required()
async def cmd_teams(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /teams"""
    try:
        teams = await api_client.get_teams()

        if not teams:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç.")
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
        teams.sort(key=lambda x: x["building"], reverse=True)

        teams_text = "üë• *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        for team in teams:
            teams_text += format_team_info(team) + "\n"

        parts = split_long_message(teams_text)
        for part in parts:
            await message.answer(part, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥: {e}")


@router.message(Command("tasks"))
@auth_required()
async def cmd_tasks(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    try:
        tasks = await api_client.get_tasks()

        if not tasks:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç.")
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
        tasks.sort(key=lambda x: x["subject"])

        tasks_text = "üìù *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:*\n\n"
        for task in tasks:
            tasks_text += format_task_info(task) + "\n"

        parts = split_long_message(tasks_text)
        for part in parts:
            await message.answer(part, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")


@router.message(Command("subjects"))
@auth_required()
async def cmd_subjects(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subjects"""
    subjects_text = "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n\n"
    for i, subject in enumerate(SUBJECTS, 1):
        subjects_text += f"{i}. {subject}\n"

    await message.answer(subjects_text, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("buildings"))
@auth_required()
async def cmd_buildings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buildings"""
    buildings_text = "üè¢ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–¥–∞–Ω–∏—è:*\n\n"
    for building in BUILDINGS:
        buildings_text += f"‚Ä¢ –ó–¥–∞–Ω–∏–µ {building}\n"

    await message.answer(buildings_text, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("results"))
@auth_required()
async def cmd_results(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /results"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        teams = await api_client.get_teams()
        tasks = await api_client.get_tasks()
        results = await api_client.get_results()

        if not teams or not tasks:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        teams.sort(key=lambda x: x["building"], reverse=True)
        tasks.sort(key=lambda x: x["subject"])

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥:*"
        for team in teams:
            results_text += (
                f"\nüè¢ *{team['name']} (–∑–¥–∞–Ω–∏–µ {team['building']}):*\n"
            )
            team_total = 0

            for task in tasks:
                result = api_client.get_team_result(
                    results, team["id"], task["id"]
                )
                if result > 0:
                    results_text += f"  ‚Ä¢ {task['subject']}: "
                    results_text += f"{task['name']} - {result} –±–∞–ª–ª–æ–≤\n"
                    team_total += result

            results_text += f"  *–ò—Ç–æ–≥–æ: {team_total} –±–∞–ª–ª–æ–≤*\n"

        if not results_text.strip():
            await message.answer("üì≠ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        else:
            parts = split_long_message(results_text)
            for part in parts:
                await message.answer(part, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
