import logging
from functools import wraps
from aiogram import types
from utils.auth import auth_manager

logger = logging.getLogger(__name__)


def auth_required(admin_only: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        admin_only: –ï—Å–ª–∏ True, —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            chat_id = message.chat.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if admin_only:
                if not auth_manager.is_admin(user_id):
                    await message.reply(
                        "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
                    )
                    return
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            elif not auth_manager.can_use_bot(user_id, chat_id):
                await message.reply(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."
                )
                return

            return await func(message, *args, **kwargs)

        return wrapper

    return decorator


def format_team_info(team: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ"""
    return f"üè¢ {team['name']} (–∑–¥–∞–Ω–∏–µ {team['building']}) - ID: {team['id']}"


def format_task_info(task: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏"""
    return f"üìù {task['name']} ({task['subject']}) - ID: {task['id']}"


def format_results_table(teams: list, tasks: list, results: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not teams or not tasks:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    table = "üìä *–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n"

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–¥–∞–Ω–∏–π –∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
    teams_sorted = sorted(teams, key=lambda x: x["building"], reverse=True)
    tasks_sorted = sorted(tasks, key=lambda x: x["subject"])

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥
    table += "| –ó–∞–¥–∞–Ω–∏–µ | "
    for team in teams_sorted:
        table += f"{team['name'][:8]} | "
    table += "\n"

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    table += "|" + "-" * 10 + "|"
    for _ in teams_sorted:
        table += "-" * 10 + "|"
    table += "\n"

    # –°—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    for task in tasks_sorted:
        task_name = f"{task['name'][:8]}"
        table += f"| {task_name} | "

        for team in teams_sorted:
            result = get_team_task_result(results, team["id"], task["id"])
            result_str = str(result) if result > 0 else " "
            table += f"{result_str:>8} | "
        table += "\n"

    return f"```\n{table}\n```"


def get_team_task_result(results: dict, team_id: int, task_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    if str(team_id) in results:
        team_results = results[str(team_id)].get("results", [])
        for result in team_results:
            if result.get("taskInfo", {}).get("id") == task_id:
                return result.get("result", 0)
    return 0


def validate_name(name: str, legal_symbols: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º"""
    name = name.strip()
    if not name:
        return False

    for char in name:
        if char not in legal_symbols:
            return False

    return True


def split_long_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]

    parts = []
    current_part = ""

    for line in text.split("\n"):
        if len(current_part + line + "\n") <= max_length:
            current_part += line + "\n"
        else:
            if current_part:
                parts.append(current_part.rstrip())
                current_part = line + "\n"
            else:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                parts.append(line[:max_length])
                current_part = (
                    line[max_length:] + "\n" if len(line) > max_length else ""
                )

    if current_part:
        parts.append(current_part.rstrip())

    return parts
